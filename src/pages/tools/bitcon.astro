---
import Base from '@layouts/Base.astro';
let sources = Object.values(import.meta.glob('../../assets/bitcon/*.svg', { eager: true }));
---
<Base
  title='Bitcon - 16x16 Icons'
  description='A library of customizable 16x16 SVG icons for easy use in web design and development.'
>
  <b>~{sources.length} bitcons</b>
  <main id='customize'>
    <div style='margin:auto;text-align:center;width:192px'>
      <div style="margin:auto;width:128px;height:128px">
        <svg viewBox='0 0 16 16' width='128' height='128' />
      </div>
      <div id='colors'></div>
      <button id='download'>Download</button>
      <button id='copy'>Copy</button>
      <div>
        <input type="radio" value="svg" name="ext" checked />
        <label>svg</label>
        <input type="radio" value="png" name="ext"/>
        <label>png</label>
      </div>
    </div>
  </main>
  <ul style="list-style:none;display:flex;justify-content:center;flex-wrap:wrap;margin:0;padding:0">
    {sources.map(Icon => <li><Icon.default/></li>)}
  </ul>
</Base>
<script>
  const preview = document.querySelector('#customize svg');
  const colors = document.querySelector('#colors');
  const icons = document.querySelectorAll('li>svg');
  const copy = document.querySelector('#copy');
  const download = document.querySelector('#download');
  // ---
  function colorsSVG() {
    let map = [];
    for (const rect of preview.children) { 
      let color = rect.getAttribute('fill');
      if(!map.includes(color))
        map.push(color);
    }
    return map;
  }
  
  function buildSVG(data) {
    return `<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 16 16'>${data}</svg>`;
  }

  function loadSVG(svg) {
    colors.innerHTML = '';
    preview.innerHTML = svg;
    
    for (let color of colorsSVG()) {
      let element = document.createElement('input');
        
      element.type = 'color';
      element.value = color;
      element.dataset.color = color;
      element.oninput = function () {
        for (const rect of preview.children) {
          let color = rect.getAttribute('fill');
          if (color == this.dataset.color)
            rect.setAttribute('fill', this.value);
        }
        this.dataset.color = this.value;
      }

      colors.appendChild(element);
    }
  }
  // ---
  copy.onclick = () => {
    let ext = document.querySelector('input[name="ext"]:checked').value;

    if (ext == 'svg')
      navigator.clipboard.writeText(buildSVG(preview.innerHTML));
    
    if (ext == 'png')
      alert('Copy to png is under development.');
  }

  download.onclick = () => {
    let ext = document.querySelector('input[name="ext"]:checked').value;
    let url = URL.createObjectURL(new Blob([buildSVG(preview.innerHTML)], { type: 'image/svg+xml' }));
    
    let a = document.createElement('a');
    a.download = 'icon.' + ext;

    if (ext == 'svg') {
      a.href = url;
      a.click();
    }

    if (ext == 'png') {
      let img = document.createElement('img');
      let canvas = document.createElement('canvas');
      let context = canvas.getContext('2d');

      canvas.width = 16;
      canvas.height = 16;

      img.src = url;
      img.onload = function() {
        context.drawImage(img, 0, 0);
        a.href = canvas.toDataURL();
        a.click();
      }
    }
  }
  // ---
  for (const icon of icons) {
    icon.setAttribute('width', '32');
    icon.setAttribute('height', '32');
    icon.setAttribute('viewBox', '0 0 16 16');
    icon.onclick = function() { loadSVG(this.innerHTML); }
  }
  loadSVG(icons[Math.floor(Math.random() * icons.length)].innerHTML);
</script>
